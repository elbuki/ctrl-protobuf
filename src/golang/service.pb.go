// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LoginRequest is the message for beginning the handshake process
type LoginRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Passphrase           []byte   `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LoginRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

// LoginResponse is the message that secures the access of a device
type LoginResponse struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type KeyPressRequest struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Key                  Key      `protobuf:"varint,2,opt,name=key,proto3,enum=pb.Key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPressRequest) Reset()         { *m = KeyPressRequest{} }
func (m *KeyPressRequest) String() string { return proto.CompactTextString(m) }
func (*KeyPressRequest) ProtoMessage()    {}
func (*KeyPressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *KeyPressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyPressRequest.Unmarshal(m, b)
}
func (m *KeyPressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyPressRequest.Marshal(b, m, deterministic)
}
func (m *KeyPressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPressRequest.Merge(m, src)
}
func (m *KeyPressRequest) XXX_Size() int {
	return xxx_messageInfo_KeyPressRequest.Size(m)
}
func (m *KeyPressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPressRequest proto.InternalMessageInfo

func (m *KeyPressRequest) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *KeyPressRequest) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return Key_ENTER
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "pb.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "pb.LoginResponse")
	proto.RegisterType((*KeyPressRequest)(nil), "pb.KeyPressRequest")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0xd5, 0xaa, 0x1d, 0x53, 0x3f, 0x46, 0x91, 0x1a, 0x41, 0x4a, 0x40, 0xe8, 0x41, 0xb6,
	0x50, 0x0f, 0xde, 0x0b, 0x9e, 0xa2, 0x20, 0xeb, 0x2f, 0x48, 0x74, 0x8c, 0x21, 0x9a, 0x5d, 0x33,
	0x1b, 0x21, 0xff, 0x5e, 0xb2, 0xbb, 0x81, 0x3d, 0xf4, 0x36, 0xf3, 0x78, 0xbc, 0x2f, 0x98, 0x33,
	0xb5, 0x7f, 0xd5, 0x3b, 0x09, 0xdd, 0x2a, 0xa3, 0x70, 0xa2, 0x8b, 0xe4, 0xa6, 0x54, 0xaa, 0xfc,
	0xa6, 0xb5, 0x45, 0x8a, 0xee, 0x73, 0x4d, 0x3f, 0xda, 0xf4, 0x8e, 0x90, 0xcc, 0x6a, 0xf2, 0x67,
	0xba, 0x85, 0xf8, 0x59, 0x95, 0x55, 0x23, 0xe9, 0xb7, 0x23, 0x36, 0x88, 0xb0, 0xdf, 0x75, 0xd5,
	0xc7, 0x22, 0x5a, 0x46, 0xab, 0x99, 0xb4, 0x37, 0xde, 0x02, 0xe8, 0x9c, 0x59, 0x7f, 0xb5, 0x39,
	0xd3, 0x62, 0xb2, 0x8c, 0x56, 0xb1, 0x0c, 0x90, 0xf4, 0x0e, 0xe6, 0x5e, 0x83, 0xb5, 0x6a, 0x98,
	0xf0, 0x12, 0xa6, 0x46, 0xd5, 0xd4, 0x58, 0x95, 0x58, 0xba, 0x27, 0xdd, 0xc2, 0x69, 0x46, 0xfd,
	0x6b, 0x4b, 0xcc, 0xa3, 0xdb, 0x4e, 0x22, 0x5e, 0xc3, 0x5e, 0x4d, 0xbd, 0x35, 0x3a, 0xd9, 0x1c,
	0x0a, 0x5d, 0x88, 0x8c, 0x7a, 0x39, 0x60, 0x1b, 0x03, 0xc7, 0x2f, 0x79, 0xd5, 0xbc, 0xb9, 0xbe,
	0x78, 0x0f, 0x53, 0xeb, 0x8c, 0x67, 0x03, 0x2b, 0x2c, 0x92, 0x9c, 0x07, 0x88, 0x8f, 0xf5, 0x08,
	0x47, 0x63, 0x00, 0xbc, 0xf0, 0xb2, 0x61, 0x9c, 0xe4, 0x4a, 0xb8, 0xd5, 0xc4, 0xb8, 0x9a, 0x78,
	0x1a, 0x56, 0x2b, 0x0e, 0xec, 0xff, 0xf0, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x76, 0x2b, 0x02, 0xe5,
	0x68, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MainServiceClient interface {
	// Login should begin a handshake process between the client and the server
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// KeyPress
	KeyPress(ctx context.Context, in *KeyPressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mainServiceClient struct {
	cc *grpc.ClientConn
}

func NewMainServiceClient(cc *grpc.ClientConn) MainServiceClient {
	return &mainServiceClient{cc}
}

func (c *mainServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.MainService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) KeyPress(ctx context.Context, in *KeyPressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.MainService/KeyPress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServiceServer is the server API for MainService service.
type MainServiceServer interface {
	// Login should begin a handshake process between the client and the server
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// KeyPress
	KeyPress(context.Context, *KeyPressRequest) (*empty.Empty, error)
}

// UnimplementedMainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMainServiceServer struct {
}

func (*UnimplementedMainServiceServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedMainServiceServer) KeyPress(ctx context.Context, req *KeyPressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyPress not implemented")
}

func RegisterMainServiceServer(s *grpc.Server, srv MainServiceServer) {
	s.RegisterService(&_MainService_serviceDesc, srv)
}

func _MainService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MainService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_KeyPress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).KeyPress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MainService/KeyPress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).KeyPress(ctx, req.(*KeyPressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MainService",
	HandlerType: (*MainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MainService_Login_Handler,
		},
		{
			MethodName: "KeyPress",
			Handler:    _MainService_KeyPress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
